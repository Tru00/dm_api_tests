# generated by datamodel-codegen:
#   filename:  http://localhost:5051/swagger/Account/swagger.json
#   timestamp: 2023-12-11T01:30:01+00:00

from __future__ import annotations

import datetime
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Extra, Field, StrictStr, ConfigDict


class BadRequestError(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    message: Optional[StrictStr] = Field(None, description='Client message')
    invalid_properties: Optional[Dict[str, List[StrictStr]]] = Field(
        None,
        alias='invalidProperties',
        description='Key-value pairs of invalid request properties',
    )


class BbParseMode(Enum):
    common = 'Common'
    info = 'Info'
    post = 'Post'
    chat = 'Chat'


class ChangeEmail(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    login: Optional[StrictStr] = Field(None, description='User login')
    password: Optional[StrictStr] = Field(None, description='User password')
    email: Optional[StrictStr] = Field(None, description='New user email')


class ChangePassword(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    login: Optional[StrictStr] = Field(None, description='User login')
    token: Optional[UUID] = Field(None, description='Password reset token')
    old_password: Optional[StrictStr] = Field(
        None, alias='oldPassword', description='Old password'
    )
    new_password: Optional[StrictStr] = Field(
        None, alias='newPassword', description='New password'
    )


class ColorSchema(Enum):
    modern = 'Modern'
    pale = 'Pale'
    classic = 'Classic'
    classic_pale = 'ClassicPale'
    night = 'Night'


class GeneralError(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    message: Optional[StrictStr] = Field(None, description='Client message')


class InfoBbText(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    value: Optional[StrictStr] = Field(None, description='Text')
    parse_mode: Optional[BbParseMode] = Field(None, alias='parseMode')


class LoginCredentials(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    login: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    remember_me: Optional[bool] = Field(None, alias='rememberMe')


class PagingSettings(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    posts_per_page: Optional[int] = Field(
        None, alias='postsPerPage', description='Number of posts on a game room page'
    )
    comments_per_page: Optional[int] = Field(
        None,
        alias='commentsPerPage',
        description='Number of commentaries on a game or a topic page',
    )
    topics_per_page: Optional[int] = Field(
        None,
        alias='topicsPerPage',
        description='Number of detached topics on a forum page',
    )
    messages_per_page: Optional[int] = Field(
        None,
        alias='messagesPerPage',
        description='Number of private messages and conversations on dialogue page',
    )
    entities_per_page: Optional[int] = Field(
        None, alias='entitiesPerPage', description='Number of other entities on page'
    )


class Rating(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    enabled: Optional[bool] = Field(None, description='Rating participation flag')
    quality: Optional[int] = Field(None, description='Quality rating')
    quantity: Optional[int] = Field(None, description='Quantity rating')


class Registration(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    login: Optional[StrictStr] = Field(None, description='Login')
    email: Optional[StrictStr] = Field(None, description='Email')
    password: Optional[StrictStr] = Field(None, description='Password')


class ResetPassword(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    login: Optional[StrictStr] = Field(None, description='Login')
    email: Optional[StrictStr] = Field(None, description='Email')


class UserRole(Enum):
    guest = 'Guest'
    player = 'Player'
    administrator = 'Administrator'
    nanny_moderator = 'NannyModerator'
    regular_moderator = 'RegularModerator'
    senior_moderator = 'SeniorModerator'


class UserSettings(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    color_schema: Optional[ColorSchema] = Field(None, alias='colorSchema')
    nanny_greetings_message: Optional[StrictStr] = Field(
        None,
        alias='nannyGreetingsMessage',
        description="Message that user's newbies will receive once they are connected",
    )
    paging: Optional[PagingSettings] = None


class User(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    login: Optional[StrictStr] = Field(None, description='Login')
    roles: Optional[List[UserRole]] = Field(None, description='Roles')
    medium_picture_url: Optional[StrictStr] = Field(
        None, alias='mediumPictureUrl', description='Profile picture URL M-size'
    )
    small_picture_url: Optional[StrictStr] = Field(
        None, alias='smallPictureUrl', description='Profile picture URL S-size'
    )
    status: Optional[StrictStr] = Field(None, description='User defined status')
    rating: Optional[Rating] = None
    online: Optional[datetime] = Field(None, description='Last seen online moment')
    name: Optional[StrictStr] = Field(None, description='User real name')
    location: Optional[StrictStr] = Field(None, description='User real location')
    registration: Optional[datetime] = Field(
        None, description='User registration moment'
    )


class UserDetails(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    login: Optional[StrictStr] = Field(None, description='Login')
    roles: Optional[List[UserRole]] = Field(None, description='Roles')
    medium_picture_url: Optional[StrictStr] = Field(
        None, alias='mediumPictureUrl', description='Profile picture URL M-size'
    )
    small_picture_url: Optional[StrictStr] = Field(
        None, alias='smallPictureUrl', description='Profile picture URL S-size'
    )
    status: Optional[StrictStr] = Field(None, description='User defined status')
    rating: Optional[Rating] = None
    online: Optional[datetime] = Field(None)
    name: Optional[StrictStr] = Field(None, description='User real name')
    location: Optional[StrictStr] = Field(None, description='User real location')
    registration: Optional[datetime] = Field(None)
    icq: Optional[StrictStr] = Field(None, description='User ICQ number')
    skype: Optional[StrictStr] = Field(None, description='User Skype login')
    original_picture_url: Optional[StrictStr] = Field(
        None, alias='originalPictureUrl', description='URL of profile picture original'
    )
    info: Optional[InfoBbText] = None
    settings: Optional[UserSettings] = None


class UserDetailsEnvelopeModel(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    resource: Optional[UserDetails] = None
    metadata: Optional[Any] = Field(None, description='Additional metadata')


class UserEnvelope(BaseModel):
    class Config:
        extra = Extra.forbid
        model_config = ConfigDict(arbitrary_types_allowed=True)

    resource: Optional[User] = None
    metadata: Optional[Any] = Field(None, description='Additional metadata')
